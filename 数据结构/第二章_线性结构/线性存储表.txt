
// 线性存贮表一般有一个一维数组和一个记录最后位置的变量组成

typedef int Position;
typedef struct LNode *List;
struct LNode{
	ElementType Data[MAXISZE];
	Position Last;
}

// 初始化
List MakeEmpty()
{
	Lsit L;
	L = (List)malloc(sizeof(struct LNode));
	L->Last = -1;
	
	return L;	
}

// 查找
#define ERROR -1

Position Find(List L,ElementType X)
{
	Position i = 0;
	
	while(i<=L->Last&&L->Data[i]!=X)
		i++;
	if(i>L->Last) //如果没找到，返回错误信息
		return NULL;
	else          // 如果找到了，返回存储位置
		return i;
}

// 插入
bool Insert(List L,ElementType X, Position P)
{
	Position i;
	
	if(L->Last==MAXISZE-1)
	{
		cout<<"表满"<<endl;
		return false;
		
	}
	if(P<0||P>L->Last+1)
	{
		cout<<"位置不合法"<<endl;
		return false;
	}
	for(i=L->Last;i>=P;i--)
	{
		L->Data[i+1] = L->Data[i];
		
	}
	L->Data[P] = X;
	L->Last++;
	return true;
}
// 删除

bool Delete(List L;Position P)
{
	Position i;
	if(P<0||P>L->Last)
	{
		cout<<"位置不存在元素"<<endl;
		return false;
	}
	for(i=P+1;i<L->Last;i++)
	{
		L->Data[i-1]=L->Data[i];
	}
	L->Last--;
	return true;
	
}


