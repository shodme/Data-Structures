#include <iostream>
#include <String>
using namespace std;

#define MaxTree 10
#define ElementType char
#define Tree int
#define NULL -1

struct TreeNode{
	ElementType Element;
	Tree left;
	Tree right;	
}T1[MaxTree],T2[MaxTree];



Tree BuildTree(struct TreeNode T[]);
int Isomorphic(Tree R1,Tree R2);


int main()
{
	Tree R1,R2;
	int flag;
	R1 = BuildTree(T1);
	R2 = BuildTree(T2);
	flag = Isomorphic(R1,R2);
	if(flag)
	{
		cout<<"Yes"<<end;
	}
	else
	{
		cout<<"No"<<endl;
	}
	
	return 0;
}




Tree BuildTree(struct TreeNode T[])
{

	int num;
	int Root = NULL;// 开始为空根节点
	int check[MaxTree];// 存储是不是根节点
	
	// 第一次输入节点个数
	cout<<"输入节点个数："<<endl;
	cin>>num;
	
	// 下面输入每个节点信息
	if(num)
	{
		for(int i=0;i<num;i++)
			check[i] = 0;
		for(i=0;i<num;i++)
		{
			scanf("%c%c%c\n",&T[i].Element,&cl,&cr);
			// 判断左子树节点
			if(cl!='-')
			{
				T[i].left = cl-'0';
				check[T[i].left] = 1;	
			}
			else
			{
				T[i].left = NULL;			
			}
			// 判断右子树节点
			if(cr!='-')
			{
				T[i].left = cl-'0';
				check[T[i].left] = 1;	
			}
			else
			{
				T[i].left = NULL;			
			}			
		}
		for(i=0;i<num;i++)
		{
			if(!check[i])
				Root = i;
				break;
			
		}
		return Root;
	}
}

int Isomorphic(Tree R1,Tree R2)
{
	if((R1==NULL)&&(R2==NULL)) // 都为空
		return 1;
	if(((R1==NULL)&&(R2!=NULL))||((R2==NULL)&&(R1!=NULL)))	// 只有一个为空
		return 0;
	if(T1[R1].Element!=T2[R2].Element) // 根节点不一样
		return 0;
	if((T1[R1].left==NULL)&&(T2[R2].left==NULL))  //左子树为空，则看右子树
		return(Isomorphic(T1[R1].right,T2[R2].right));
	if(((T1[R1].left!=NULL)&&(T2[R2].left!=NULL))&&((T1[T1[R1].left].Element==T2[T2[R2].left].Element)))	 // 不需要交换左右子树
		return(Isomorphic(T1[R1].left,T2[R2].left)&&Isomorphic(T1[R1].right,T2[R2].right));
	else
		return(Isomorphic(T1[R1].left,T2[R2].right)&&Isomorphic(T1[R1].right,T2[R2].left));   // 交换左右子树
}